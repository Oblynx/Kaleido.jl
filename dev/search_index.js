var documenterSearchIndex = {"docs":
[{"location":"#Kaleido.jl-1","page":"Home","title":"Kaleido.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Setting/getting-multiple-locations-1","page":"Home","title":"Setting/getting multiple locations","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Kaleido.MultiLens","category":"page"},{"location":"#Kaleido.MultiLens","page":"Home","title":"Kaleido.MultiLens","text":"MultiLens(lenses::Tuple)\nMultiLens(lenses::NamedTuple)\n\nExamples\n\njulia> using Setfield, Kaleido\n\njulia> ml = MultiLens((\n           (@lens _.x),\n           (@lens _.y.z),\n       ));\n\njulia> @assert get((x=1, y=(z=2,)), ml) === (1, 2)\n\njulia> @assert set((x=1, y=(z=2,)), ml, (\"x\", \"y.z\")) === (x=\"x\", y=(z=\"y.z\",))\n\njulia> ml = MultiLens((\n           a = (@lens _.x),\n           b = (@lens _.y.z),\n       ));\n\njulia> @assert get((x=1, y=(z=2,)), ml) === (a=1, b=2)\n\njulia> @assert set((x=1, y=(z=2,)), ml, (a=:x, b=\"y.z\")) === (x=:x, y=(z=\"y.z\",))\n\njulia> @assert set((x=1, y=(z=2,)), ml, (b=\"y.z\", a=:x)) === (x=:x, y=(z=\"y.z\",))\n\n\n\n\n\n","category":"type"},{"location":"#Bijective-transformation-as-lenses-1","page":"Home","title":"Bijective transformation as lenses","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Kaleido.BijectionLens\nKaleido.toℝ₊\nKaleido.toℝ₋\nKaleido.to𝕀","category":"page"},{"location":"#Kaleido.BijectionLens","page":"Home","title":"Kaleido.BijectionLens","text":"BijectionLens(inward, outward) :: Lens\nBijectionLens(xf::TransformVariables.AbstractTransform) :: Lens\n\nExamples\n\njulia> using Setfield, Kaleido\n\njulia> l = (@lens _.y[2]) ∘ BijectionLens(x -> 2x, x -> x/2);\n\njulia> obj = (x=0, y=(1, 2, 3));\n\njulia> @assert get(obj, l) == 1.0 == 2/2\n\njulia> @assert set(obj, l, 0.5) == (x=0, y=(1, 1.0, 3))\n\njulia> using Setfield, Kaleido, TransformVariables\n\njulia> l = (@lens _.y[2]) ∘ BijectionLens(as𝕀);\n\njulia> obj = (x=0, y=(1, 0.5, 3));\n\njulia> @assert get(obj, l) == 0\n\njulia> @assert set(obj, l, Inf).y[2] ≈ 1\n\njulia> @assert set(obj, l, -Inf).y[2] ≈ 0.0\n\n\n\n\n\n","category":"type"},{"location":"#Kaleido.toℝ₊","page":"Home","title":"Kaleido.toℝ₊","text":"toℝ₊ :: BijectionLens\n\nExamples\n\njulia> using Setfield, Kaleido\n\njulia> l = (@lens _.y[2]) ∘ toℝ₊;\n\njulia> obj = (x=0, y=(0, 1, 2));\n\njulia> @assert get(obj, l) == 0.0 == log(obj.y[2])\n\njulia> @assert set(obj, l, -1) == (x=0, y=(0, exp(-1), 2))\n\n\n\n\n\n","category":"constant"},{"location":"#Kaleido.toℝ₋","page":"Home","title":"Kaleido.toℝ₋","text":"toℝ₋ :: BijectionLens\n\nExamples\n\njulia> using Setfield, Kaleido\n\njulia> l = (@lens _.y[2]) ∘ toℝ₋;\n\njulia> obj = (x=0, y=(0, -1, 2));\n\njulia> @assert get(obj, l) == 0.0 == log(-obj.y[2])\n\njulia> @assert set(obj, l, 1) == (x=0, y=(0, -exp(1), 2))\n\n\n\n\n\n","category":"constant"},{"location":"#Kaleido.to𝕀","page":"Home","title":"Kaleido.to𝕀","text":"to𝕀 :: BijectionLens\n\nExamples\n\njulia> using Setfield, Kaleido\n\njulia> l = (@lens _.y[2]) ∘ to𝕀;\n\njulia> obj = (x=0, y=(0, 0.5, 2));\n\njulia> @assert get(obj, l) == 0.0\n\njulia> @assert set(obj, l, Inf).y[2] ≈ 1\n\njulia> @assert set(obj, l, -Inf).y[2] ≈ 0\n\n\n\n\n\n","category":"constant"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Modules = [Kaleido]\nPublic = false","category":"page"},{"location":"internals/#Kaleido.KaleidoLens","page":"Internals","title":"Kaleido.KaleidoLens","text":"KaleidoLens <: Lens\n\nInternal abstract type for Kaleido.jl.\n\n\n\n\n\n","category":"type"}]
}
